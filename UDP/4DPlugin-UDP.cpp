/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-UDP.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : UDP
 #	author : miyako
 #	2020/05/18
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-UDP.h"

void OnStartup() {
#if VERSIONWIN
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);
    setlocale(LC_ALL, "");
#endif
}

void OnExit() {
#if VERSIONWIN
    WSACleanup();
#endif
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
                case kInitPlugin :
                case kServerInitPlugin :
                    OnStartup();
                    break;

                case kDeinitPlugin :
                    OnExit();
                    break;
                
			// --- UDP
            
			case 1 :
				UDP_Get_server_list(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

#define PAYLOAD_LENGTH 96
#define STR31LEN 32
#define SUPPORT_IPv6 0

static void receivePayloadFromServer(char *buf, void *remaddr, PA_CollectionRef returnValue, BOOL ipv6 = false) {
    
    std::vector<char>host(STR31LEN);
    std::vector<char>name(STR31LEN);
    std::vector<char>addr(INET6_ADDRSTRLEN);
            
    memset(&host[0], 0, STR31LEN);
    memset(&name[0], 0, STR31LEN);
    memset(&addr[0], 0, INET6_ADDRSTRLEN);
    
    sockaddr_in  *remaddr4;
    sockaddr_in6 *remaddr6;
    
    if(ipv6) {
        remaddr6 = (sockaddr_in6 *)remaddr;
        inet_ntop(AF_INET6, &(remaddr6->sin6_addr), (char *)&addr[0], INET6_ADDRSTRLEN);
    }else{
        remaddr4 = (sockaddr_in  *)remaddr;
        strcpy (&addr[0], inet_ntoa(remaddr4->sin_addr));
    }
    
    strcpy (&host[0], &buf[0]);
    strcpy (&name[0], &buf[64]);
    
    char uname[48];
    memset(uname, 0, 48);
    
    PA_Variable args[1];
    args[0] = PA_CreateVariable(eVK_Longint);
    PA_SetLongintVariable(&args[0], eDL_Default_localization);
    PA_Variable locale = PA_ExecuteCommandByID/*ThreadSafe*/(CMD_Get_database_localization, args, 1);
    PA_ClearVariable(&args[0]);
    
    if(PA_GetVariableKind(locale) == eVK_Unistring) {
        
        PA_Unistring ulocale = PA_GetStringVariable(locale);
        
        if(PA_GetUnistring(&ulocale)) {
            
            C_TEXT t;
            t.setUTF16String((const PA_Unistring *)&ulocale);
            CUTF8String u8;
            t.copyUTF8String(&u8);
            
            PA_4DCharSet fromCharSet = eVTC_MAC_ROMAN;
            
            if(u8 == (const uint8_t *)"ja") {
                
                fromCharSet = eVTC_SHIFT_JIS;
                
            }
            
            PA_ConvertCharsetToCharset(&name[0],
                                       (PA_long32)strlen(&name[0]),
                                       fromCharSet,
                                       uname,
                                       (PA_long32)48,
                                       eVTC_UTF_8);
            
        }
        
    }
    
    PA_ObjectRef o = PA_CreateObject();
    
    ob_set_s(o, "host", &host[0]);
    ob_set_s(o, "addr", &addr[0]);
    ob_set_s(o, "name", uname);
    
    PA_Variable s = PA_CreateVariable(eVK_Object);
    PA_SetObjectVariable(&s, o);
    PA_SetCollectionElement(returnValue, PA_GetCollectionLength(returnValue), s);
    
    
}

void UDP_Get_server_list(PA_PluginParameters params) {
    
    PA_CollectionRef returnValue = PA_CreateCollection();
    PA_ObjectRef options = PA_GetObjectParameter(params, 1);
    
    int port = 19813;
    int wait = 1;
    
    if(options) {
        
        int _port = (int)ob_get_n(options, L"port");
        if(_port > 0) {
            port = _port;
        }
        
        int _wait = (int)ob_get_n(options, L"wait");
        if(_wait > 0) {
            wait = _wait;
        }
        
    }
    
    sock_t sock;
    
    char msg[PAYLOAD_LENGTH];
    memset(msg, 0, PAYLOAD_LENGTH);
    strcpy(&msg[32], "4D Server II");
    
    struct timeval tv;
    tv.tv_sec = 0;
    tv.tv_usec = 100000;//0.1 sec.
    
    int reuse = true;
    
    recvlen_t recvlen;
    
#if SUPPORT_IPv6
        if ((sock = socket (AF_INET6, SOCK_DGRAM, IPPROTO_UDP)) != -1) {
            
            broadcast_t broadcast = 1;
            
            if (setsockopt (sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) == 0) {
            
                setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse));
                setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO , &tv, sizeof tv);
                            
                struct sockaddr_in6 sockaddr;
                memset(&sockaddr, 0, sizeof(sockaddr));
#if VERSIONMAC                      
                sockaddr.sin6_len = sizeof(sockaddr);
#endif
                sockaddr.sin6_family = AF_INET6;
                
    //            sockaddr.sin6_addr=in6addr_any;
                memcpy(&(sockaddr.sin6_addr), &in6addr_any, sizeof(sockaddr.sin6_addr));
                sockaddr.sin6_port = htons(port);
                
                sendto (sock, msg, PAYLOAD_LENGTH, 0, (struct sockaddr*) &sockaddr, sizeof(sockaddr));
                
                char buf[PAYLOAD_LENGTH];
                struct sockaddr_in6 remaddr;
                
                time_t startTime = time(0);
                
                do{
                    
                    PA_YieldAbsolute();
                    
                    addrlen_t addrlen = sizeof (remaddr);
                    
                    recvlen = recvfrom (sock, buf, PAYLOAD_LENGTH, 0, (struct sockaddr *)&remaddr, &addrlen);
                                    
                    if (recvlen > 0){
                        
                        receivePayloadFromServer(buf, &remaddr, returnValue, true);
                        
                    }
                    
                }while(abs(anchorTime - now) < wait);
                
            }
            
            close (sock);
        }

#endif
    
    if ((sock = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP)) != -1) {

        broadcast_t broadcast = 1;
        
        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) == 0) {

            setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (const char *)&reuse, sizeof(reuse));
            setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO , (const char *)&tv, sizeof (tv));
                        
            struct sockaddr_in sockaddr;
            memset(&sockaddr, 0, sizeof(sockaddr));
#if VERSIONMAC            
            sockaddr.sin_len = sizeof(sockaddr);
#endif
            sockaddr.sin_family = AF_INET;
            
            /*this will return 127.0.0.1 for localhost*/
//            sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);
            
            sockaddr.sin_port = htons(port);
            
            char *ip = (char *)"255.255.255.255";
            
#if VERSIONMAC
            inet_aton (ip, (in_addr *)&sockaddr.sin_addr.s_addr);
#else
			sockaddr.sin_addr.s_addr = inet_addr(ip);
#endif
            
            sendto (sock, msg, PAYLOAD_LENGTH, 0, (struct sockaddr*) &sockaddr, sizeof(sockaddr));
            
            char buf[PAYLOAD_LENGTH];
            struct sockaddr_in remaddr;

			time_t startTime = time(0);

            do{

                PA_YieldAbsolute();
                
                addrlen_t addrlen = sizeof (remaddr);
                
                recvlen = recvfrom (sock, buf, PAYLOAD_LENGTH, 0, (struct sockaddr *)&remaddr, &addrlen);
                
                if (recvlen > 0){

                    receivePayloadFromServer(buf, &remaddr, returnValue);
 
                }
                
            }while(abs(startTime - time(0)) < wait);
            
        }
        
        close (sock);
    }
    
    PA_ReturnCollection(params, returnValue);
}
